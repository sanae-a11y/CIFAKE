[
    {
      "codeSnippet": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
      "skills": ["Java", "Java 8", "Object-Oriented Programming (OOP)", "Problem Solving", "Version Control"]
    },
    {
      "codeSnippet": "public class Employee {\n    private String name;\n    private int age;\n\n    // Constructor, getters, and setters\n}",
      "skills": ["Java", "Object-Oriented Programming (OOP)", "Java Persistence API", "Technical Design"]
    },
    {
      "codeSnippet": "const addNumbers = (num1, num2) => {\n    return num1 + num2;\n};",
      "skills": ["JavaScript (Programming Language)", "Functional Specification", "Debugging"]
    },
    {
      "codeSnippet": "@RestController\npublic class UserController {\n    @Autowired\n    private UserService userService;\n\n    // Rest of the controller code\n}",
      "skills": ["Java", "Spring Framework", "Spring Boot", "RESTful API", "Dependency Injection"]
    },
    {
      "codeSnippet": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\nprint(df.head())",
      "skills": ["Python (Programming Language)", "Data Structures", "Machine Learning", "Data Analysis"]
    },
    {
      "codeSnippet": "<html>\n    <head>\n        <title>Hello World</title>\n    </head>\n    <body>\n        <h1>Hello, World!</h1>\n    </body>\n</html>",
      "skills": ["HTML", "Cascading Style Sheets (CSS)", "User Interface (UI)"]
    },
    {
        "codeSnippet": "import java.util.List;\nimport java.util.stream.Collectors;\n\npublic class EmployeeService {\n\n    public List<String> filterEmployeesByAge(List<Employee> employees, int minAge, int maxAge) {\n        return employees.stream()\n                .filter(e -> e.getAge() >= minAge && e.getAge() <= maxAge)\n                .map(Employee::getName)\n                .collect(Collectors.toList());\n    }\n\n    public void processEmployeeData(List<Employee> employees) {\n        employees.parallelStream()\n                .forEach(this::processSingleEmployee);\n    }\n\n    private void processSingleEmployee(Employee employee) {\n        // Implementation for processing a single employee\n    }\n}",
        "skills": [
          "Java",
          "Java 8",
          "Object-Oriented Programming (OOP)",
          "Lambda Expressions",
          "Stream API",
          "Functional Programming",
          "Parallel Programming",
          "Concurrency",
          "Data Processing",
          "Code Optimization"
        ]
      },
      {
        "codeSnippet": "public class ShoppingCart {\n\n    private List<CartItem> items;\n\n    public double calculateTotalPrice() {\n        return items.stream()\n                .mapToDouble(CartItem::getTotalPrice)\n                .sum();\n    }\n\n    public void checkout(User user) {\n        // Implementation for checkout process\n    }\n\n    // Other methods and class members\n}",
        "skills": [
          "Java",
          "Java 8",
          "Object-Oriented Programming (OOP)",
          "Lambda Expressions",
          "Stream API",
          "Functional Programming",
          "Algorithmic Thinking",
          "E-Commerce",
          "Software Design Patterns"
        ]
      },
      {
        "codeSnippet": "const fetchData = async (url) => {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n};",
        "skills": [
          "JavaScript (Programming Language)",
          "Asynchronous Programming",
          "Error Handling",
          "Web Development",
          "RESTful API",
          "Promises",
          "Asynchronous JavaScript",
          "Front End (Software Engineering)"
        ]
      }
  ]
  